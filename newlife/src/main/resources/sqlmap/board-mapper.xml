<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace는 BoardMapper 인터페이스의 위치 -->
<!-- 왜냐면 이 xml파일은 해당 interface를 통해 mapping을 설정해주는 것이기에 -->
<!-- Namespaces were optional in previous versions of MyBatis, which was 
	confusing and unhelpful. Namespaces are now required and have a purpose beyond 
	simply isolating statements with longer, fully-qualified names. Namespaces 
	enable the interface bindings as you see here, and even if you don’t think 
	you’ll use them today, you should follow these practices laid out here in 
	case you change your mind. Using the namespace once, and putting it in a 
	proper Java package namespace will clean up your code and improve the usability 
	of MyBatis in the long term. : MyBatis3 공식 설명 -->

<mapper namespace="com.nlchurch.mapper.BoardMapper">

	<!-- resultType: -->
	<!-- The fully qualified class name or alias for the expected type that 
		will be returned from this statement. Note that in the case of collections, 
		this SHOULD be the type that the collection CONTAINS, NOT the type of the 
		collection itself. -->
	<!-- resultType은 반드시 명시해줘야 함!! -->
	
	<select id="listBoards" resultType="hashmap">
		SELECT 
			b.*, m.nickname 
		FROM 
			board b 
		LEFT JOIN 
			member m
		ON 
			b.member_id = m.id
		WHERE 
			b.category_id = #{categoryId}
		ORDER BY 
			b.id DESC
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<!-- worship(video) 게시글 list -->
	<select id="listWorshipBoards" resultType="hashmap">
		SELECT 
			b.*, m.nickname, w.id AS w_id, w.service_name AS w_name, w.service_date AS w_date, w.minister, w.bible
		FROM 
			board b 
		LEFT JOIN 
			member m
		ON 
			b.member_id = m.id
		LEFT JOIN 
			worship w
		ON 
			b.id = w.board_id
		WHERE 
			b.category_id = #{categoryId}
		ORDER BY 
			b.id DESC
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<select id="countBoards" resultType="long">
		SELECT 
			count(*) 
		FROM 
			board b 
		WHERE 
			b.category_id = #{categoryId}
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->


	<select id="getBoard" resultType="hashMap">
		SELECT 
			b.*, m.nickname, c.name AS c_name, c.path AS c_path, c.parent_name AS c_parent_name
		FROM 
			board b 
        LEFT JOIN 
        	member m 
		ON 
			b.member_id = m.id
        LEFT JOIN 
        	category c
        ON 
        	b.category_id = c.id
		WHERE 
			b.id = #{id}		
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<select id="listCategories" resultType="category">
		SELECT 
			* 
		FROM 
			category
		ORDER BY
			parent_id
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<!-- category 하나를 id로 가져오기 -->
	<select id="getCategoryById" resultType="category">
		SELECT 
			c.*
		FROM 
			category c
		WHERE 
			c.id = #{id}
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<!-- category 하나를 path로 가져오기 -->
	<select id="getCategoryByPath" resultType="category">
		SELECT 
			c.* 
		FROM 
			category c 
		WHERE 
			c.path = #{path}
	</select> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<!-- useGeneratedKeys="true" keyProperty="id"를 하면, id에 auto generated key가 자동 매핑된다! -->
	<insert id="createBoard" parameterType="board" useGeneratedKeys="true" keyProperty="id">
		INSERT 
		INTO 
			board 
			(category_id, member_id, title, content) 
		VALUES 
			(#{boardDTO.category_id}, #{boardDTO.member_id}, #{boardDTO.title}, #{boardDTO.content})
	</insert> <!-- ;세미콜론 금지!!!!!!!!!! -->


	<update id="updateBoard" parameterType="board">
		UPDATE 
			board
	    SET 
	    	category_id = #{category_id}, title= #{title}, content = #{content}, last_update = sysdate()
		WHERE 
			id = #{id}
	</update> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<delete id="deleteBoard">
		DELETE 
		FROM 
			board
    	WHERE 
    		id = #{id}
	</delete> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
	
	<update id="countViews">		
	    UPDATE 
	    	board
	    SET 
	    	view_tally = view_tally + 1
		WHERE 
			id = #{id}
	</update> <!-- ;세미콜론 금지!!!!!!!!!! -->
	
</mapper>